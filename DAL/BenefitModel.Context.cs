//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SABenefitsEntities1 : DbContext
    {
        public SABenefitsEntities1()
            : base("name=SABenefitsEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Dependent> Dependents { get; set; }
        public virtual DbSet<IndvidualTbl> IndvidualTbls { get; set; }
        public virtual DbSet<MasterType> MasterTypes { get; set; }
        public virtual DbSet<MasterValue> MasterValues { get; set; }
        public virtual DbSet<OrgChiefAdmin> OrgChiefAdmins { get; set; }
        public virtual DbSet<OrgTbl> OrgTbls { get; set; }
    
        public virtual int sp_InsertUpdateChief(Nullable<int> chiefId, Nullable<int> orgId, Nullable<int> orgRole, Nullable<System.DateTime> appointmentDate, Nullable<System.DateTime> terminationDate, Nullable<int> indvDetailId)
        {
            var chiefIdParameter = chiefId.HasValue ?
                new ObjectParameter("ChiefId", chiefId) :
                new ObjectParameter("ChiefId", typeof(int));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(int));
    
            var orgRoleParameter = orgRole.HasValue ?
                new ObjectParameter("OrgRole", orgRole) :
                new ObjectParameter("OrgRole", typeof(int));
    
            var appointmentDateParameter = appointmentDate.HasValue ?
                new ObjectParameter("AppointmentDate", appointmentDate) :
                new ObjectParameter("AppointmentDate", typeof(System.DateTime));
    
            var terminationDateParameter = terminationDate.HasValue ?
                new ObjectParameter("TerminationDate", terminationDate) :
                new ObjectParameter("TerminationDate", typeof(System.DateTime));
    
            var indvDetailIdParameter = indvDetailId.HasValue ?
                new ObjectParameter("IndvDetailId", indvDetailId) :
                new ObjectParameter("IndvDetailId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdateChief", chiefIdParameter, orgIdParameter, orgRoleParameter, appointmentDateParameter, terminationDateParameter, indvDetailIdParameter);
        }
    
        public virtual int sp_insertupdateIndv(Nullable<int> id, string fname, string lname, string mname, Nullable<int> title, Nullable<int> gender, Nullable<int> countryOfBirth, Nullable<System.DateTime> dOB, Nullable<decimal> iDNumber, string passportNumber, Nullable<decimal> homeTelNo, Nullable<decimal> celluarNo, string primeryEmail, Nullable<decimal> workTelNo, string alternativeEmail, string facebookId, string twitter, string residentialAdd, string postalAdd, Nullable<int> orgId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("Fname", fname) :
                new ObjectParameter("Fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("Lname", lname) :
                new ObjectParameter("Lname", typeof(string));
    
            var mnameParameter = mname != null ?
                new ObjectParameter("Mname", mname) :
                new ObjectParameter("Mname", typeof(string));
    
            var titleParameter = title.HasValue ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(int));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var countryOfBirthParameter = countryOfBirth.HasValue ?
                new ObjectParameter("CountryOfBirth", countryOfBirth) :
                new ObjectParameter("CountryOfBirth", typeof(int));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var iDNumberParameter = iDNumber.HasValue ?
                new ObjectParameter("IDNumber", iDNumber) :
                new ObjectParameter("IDNumber", typeof(decimal));
    
            var passportNumberParameter = passportNumber != null ?
                new ObjectParameter("PassportNumber", passportNumber) :
                new ObjectParameter("PassportNumber", typeof(string));
    
            var homeTelNoParameter = homeTelNo.HasValue ?
                new ObjectParameter("HomeTelNo", homeTelNo) :
                new ObjectParameter("HomeTelNo", typeof(decimal));
    
            var celluarNoParameter = celluarNo.HasValue ?
                new ObjectParameter("CelluarNo", celluarNo) :
                new ObjectParameter("CelluarNo", typeof(decimal));
    
            var primeryEmailParameter = primeryEmail != null ?
                new ObjectParameter("PrimeryEmail", primeryEmail) :
                new ObjectParameter("PrimeryEmail", typeof(string));
    
            var workTelNoParameter = workTelNo.HasValue ?
                new ObjectParameter("WorkTelNo", workTelNo) :
                new ObjectParameter("WorkTelNo", typeof(decimal));
    
            var alternativeEmailParameter = alternativeEmail != null ?
                new ObjectParameter("AlternativeEmail", alternativeEmail) :
                new ObjectParameter("AlternativeEmail", typeof(string));
    
            var facebookIdParameter = facebookId != null ?
                new ObjectParameter("FacebookId", facebookId) :
                new ObjectParameter("FacebookId", typeof(string));
    
            var twitterParameter = twitter != null ?
                new ObjectParameter("Twitter", twitter) :
                new ObjectParameter("Twitter", typeof(string));
    
            var residentialAddParameter = residentialAdd != null ?
                new ObjectParameter("ResidentialAdd", residentialAdd) :
                new ObjectParameter("ResidentialAdd", typeof(string));
    
            var postalAddParameter = postalAdd != null ?
                new ObjectParameter("PostalAdd", postalAdd) :
                new ObjectParameter("PostalAdd", typeof(string));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insertupdateIndv", idParameter, fnameParameter, lnameParameter, mnameParameter, titleParameter, genderParameter, countryOfBirthParameter, dOBParameter, iDNumberParameter, passportNumberParameter, homeTelNoParameter, celluarNoParameter, primeryEmailParameter, workTelNoParameter, alternativeEmailParameter, facebookIdParameter, twitterParameter, residentialAddParameter, postalAddParameter, orgIdParameter);
        }
    
        public virtual int sp_InsertUpdateOrg(Nullable<int> id, Nullable<int> parentOrgId, string orgName, Nullable<int> orgType, Nullable<bool> isOrgReg, string regType, string regNumber, string orglegalName, Nullable<System.DateTime> establishedDate, Nullable<System.DateTime> inactiveDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var parentOrgIdParameter = parentOrgId.HasValue ?
                new ObjectParameter("ParentOrgId", parentOrgId) :
                new ObjectParameter("ParentOrgId", typeof(int));
    
            var orgNameParameter = orgName != null ?
                new ObjectParameter("OrgName", orgName) :
                new ObjectParameter("OrgName", typeof(string));
    
            var orgTypeParameter = orgType.HasValue ?
                new ObjectParameter("OrgType", orgType) :
                new ObjectParameter("OrgType", typeof(int));
    
            var isOrgRegParameter = isOrgReg.HasValue ?
                new ObjectParameter("IsOrgReg", isOrgReg) :
                new ObjectParameter("IsOrgReg", typeof(bool));
    
            var regTypeParameter = regType != null ?
                new ObjectParameter("RegType", regType) :
                new ObjectParameter("RegType", typeof(string));
    
            var regNumberParameter = regNumber != null ?
                new ObjectParameter("RegNumber", regNumber) :
                new ObjectParameter("RegNumber", typeof(string));
    
            var orglegalNameParameter = orglegalName != null ?
                new ObjectParameter("OrglegalName", orglegalName) :
                new ObjectParameter("OrglegalName", typeof(string));
    
            var establishedDateParameter = establishedDate.HasValue ?
                new ObjectParameter("EstablishedDate", establishedDate) :
                new ObjectParameter("EstablishedDate", typeof(System.DateTime));
    
            var inactiveDateParameter = inactiveDate.HasValue ?
                new ObjectParameter("InactiveDate", inactiveDate) :
                new ObjectParameter("InactiveDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdateOrg", idParameter, parentOrgIdParameter, orgNameParameter, orgTypeParameter, isOrgRegParameter, regTypeParameter, regNumberParameter, orglegalNameParameter, establishedDateParameter, inactiveDateParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<sp_selectMasterValues_Result> sp_selectMasterValues(Nullable<int> masterTypeId)
        {
            var masterTypeIdParameter = masterTypeId.HasValue ?
                new ObjectParameter("MasterTypeId", masterTypeId) :
                new ObjectParameter("MasterTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_selectMasterValues_Result>("sp_selectMasterValues", masterTypeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_IsMemberExist(string fname, string lname, Nullable<int> gender, Nullable<int> cOB, Nullable<System.DateTime> dOB, Nullable<decimal> idNumber, Nullable<decimal> workTelNo)
        {
            var fnameParameter = fname != null ?
                new ObjectParameter("Fname", fname) :
                new ObjectParameter("Fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("Lname", lname) :
                new ObjectParameter("Lname", typeof(string));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(int));
    
            var cOBParameter = cOB.HasValue ?
                new ObjectParameter("COB", cOB) :
                new ObjectParameter("COB", typeof(int));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var idNumberParameter = idNumber.HasValue ?
                new ObjectParameter("IdNumber", idNumber) :
                new ObjectParameter("IdNumber", typeof(decimal));
    
            var workTelNoParameter = workTelNo.HasValue ?
                new ObjectParameter("WorkTelNo", workTelNo) :
                new ObjectParameter("WorkTelNo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_IsMemberExist", fnameParameter, lnameParameter, genderParameter, cOBParameter, dOBParameter, idNumberParameter, workTelNoParameter);
        }
    
        public virtual ObjectResult<string> sp_GetRolebyMemberandorg(string userEmail, Nullable<int> orgId)
        {
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("orgId", orgId) :
                new ObjectParameter("orgId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetRolebyMemberandorg", userEmailParameter, orgIdParameter);
        }
    
        public virtual ObjectResult<sp_MemberOrgLinkCount_Result> sp_MemberOrgLinkCount(string userEmail)
        {
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MemberOrgLinkCount_Result>("sp_MemberOrgLinkCount", userEmailParameter);
        }
    
        public virtual int sp_MemberOrgLinkCount1(string userEmail)
        {
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MemberOrgLinkCount1", userEmailParameter);
        }
    
        public virtual ObjectResult<sp_MemberOrgLinkCount11_Result> sp_MemberOrgLinkCount11(string userEmail)
        {
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MemberOrgLinkCount11_Result>("sp_MemberOrgLinkCount11", userEmailParameter);
        }
    
        public virtual int sp_InsertRoleWithOrg(string userId, string role, Nullable<int> orgId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("orgId", orgId) :
                new ObjectParameter("orgId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertRoleWithOrg", userIdParameter, roleParameter, orgIdParameter);
        }
    }
}
